import Groq from 'groq-sdk';

// Initialize Groq client
function initializeGroqClient() {
  const apiKey = process.env.GROQ_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå GROQ_API_KEY is not set in environment variables');
    throw new Error('GROQ_API_KEY is not set in environment variables');
  }
  
  console.log('‚úÖ Initializing Groq client with API key:', apiKey.substring(0, 10) + '...');
  return new Groq({ apiKey });
}

// Generate tweet using Groq with knowledge base context
export async function generateTweetWithGroq(
  knowledgeBaseText: string,
  campaignGoal: string,
  campaignDetails: string,
  hashtags: string[],
  tone?: string,
  language?: string,
  accountsToMention?: string[],
  existingContent?: string
): Promise<string> {
  try {
    console.log('ü§ñ Generating tweet with Groq...');
    console.log('üìù Campaign goal:', campaignGoal);
    console.log('üìã Knowledge base length:', knowledgeBaseText.length, 'characters');
    console.log('üè∑Ô∏è Hashtags:', hashtags);
    console.log('üåç Language:', language || 'English');
    console.log('üë• Accounts to mention:', accountsToMention || []);
    console.log('‚ú® Has existing content:', !!existingContent);
    
    const client = initializeGroqClient();
    
    // Your perfect prompt adapted for Groq
    const systemPrompt = `You are a creative Web3 social media expert. Your task is to write a **unique tweet** using the provided knowledge base context.

Guidelines to follow:

üé≠ **Tone** ‚Üí Choose one: *excited, casual, professional, witty, curious, urgent, optimistic, bold, playful, futuristic.*

üòÄ **Emotions & Emojis** ‚Üí Add 0‚Äì3 emojis from these sets:
üî•üöÄ‚ú® | üåçüí°üíß | üéØüíéüìà | üí¨ü§ù‚ö° | üíéüëÄüéâ

ü™Ñ **Opening Style (Hook)** ‚Üí Start with one of:
‚Ä¢ Bold statement
‚Ä¢ Surprising fact/statistic  
‚Ä¢ Rhetorical or direct question
‚Ä¢ Short story or scenario
‚Ä¢ Benefit-driven opener
‚Ä¢ Myth-busting claim
‚Ä¢ FOMO/urgency trigger

üì£ **Call-to-Action (Ending)** ‚Üí Conclude with one:
"Join the waitlist" | "Retweet if you agree" | "Don't miss out" | "Be early" |
"Tag a friend" | "Check it out now" | "Try the demo" | "Spread the word"

‚úÖ **Requirements**:
‚Ä¢ Tweet must be **under 280 characters**
‚Ä¢ Must be engaging, authentic, and shareable
‚Ä¢ Use knowledge base context to make it informative
‚Ä¢ Include ALL specified hashtags: ${hashtags.map(tag => `#${tag}`).join(' ')}`;
    
    let userPrompt = `**Campaign Goal**: ${campaignGoal}

**Campaign Details**: ${campaignDetails}

**Knowledge Base Context**:
${knowledgeBaseText}

**Required Hashtags**: ${hashtags.map(tag => `#${tag}`).join(' ')}`;

    // Add language requirement if specified
    if (language && language !== 'English') {
      userPrompt += `\n\n**Language**: Please write the tweet in ${language}.`;
    }

    // Add accounts to mention if specified
    if (accountsToMention && accountsToMention.length > 0) {
      userPrompt += `\n\n**Accounts to Mention**: Please mention these accounts in the tweet: ${accountsToMention.map(account => `@${account}`).join(' ')}. Make sure to integrate the mentions naturally into the content.`;
    }

    // Add existing content for beautification if provided
    if (existingContent && existingContent.trim()) {
      userPrompt += `\n\n**Existing Content to Improve**: "${existingContent.trim()}"\n\nPlease improve and beautify this existing content while keeping the core message intact. Make it more engaging, add appropriate emojis, and ensure it follows all the guidelines above.`;
    }

    userPrompt += `\n\n${existingContent && existingContent.trim() ? 'Improve the existing content' : 'Generate a compelling tweet'} that uses the knowledge base context to create authentic, informative content about the campaign goal. Make it human and natural, not robotic.`;

    const response = await client.chat.completions.create({
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      model: 'llama-3.3-70b-versatile',
      temperature: 0.8,
      max_tokens: 300,
    });

    const tweet = response.choices[0]?.message?.content?.trim();
    
    if (!tweet) {
      throw new Error('No tweet generated by Groq');
    }
    
    console.log('‚úÖ Tweet generated successfully:', tweet);
    
    // Ensure hashtags are included if not already present
    let finalTweet = tweet;
    const hashtagString = hashtags.map(tag => `#${tag}`).join(' ');
    if (!finalTweet.includes(hashtagString)) {
      // Add hashtags if they don't fit naturally
      if (finalTweet.length + hashtagString.length + 1 < 280) {
        finalTweet = `${finalTweet} ${hashtagString}`;
      }
    }
    
    return finalTweet;
    
  } catch (error) {
    console.error('‚ùå Error generating tweet with Groq:', error);
    
    // Log more detailed error information
    if (error && typeof error === 'object') {
      console.error('Error details:', {
        name: (error as any).name,
        message: (error as any).message,
        status: (error as any).status,
        response: (error as any).response?.data,
      });
    }
    
    throw new Error(`Failed to generate tweet with Groq: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

// Generate multiple tweet variations using Groq
export async function generateMultipleTweetsWithGroq(
  knowledgeBaseText: string,
  campaignGoal: string,
  campaignDetails: string,
  hashtags: string[],
  count: number = 1,
  language?: string,
  accountsToMention?: string[],
  existingContent?: string
): Promise<{ tweet: string; twitterLink: string }[]> {
  // Always generate exactly 1 tweet
  const tweet = await generateTweetWithGroq(
    knowledgeBaseText,
    campaignGoal,
    campaignDetails,
    hashtags,
    undefined, // tone
    language,
    accountsToMention,
    existingContent
  );

  const twitterLink = createTwitterIntentLink(tweet, hashtags);

  return [{ tweet, twitterLink }];
}

// Create Twitter intent link (same as in rivalz-client)
export function createTwitterIntentLink(tweetText: string, hashtags?: string[]): string {
  let fullTweetText = tweetText;
  
  // Add hashtags if they're not already in the tweet
  if (hashtags && hashtags.length > 0) {
    const hashtagString = hashtags.map(tag => `#${tag}`).join(' ');
    if (!tweetText.includes(hashtagString)) {
      fullTweetText = `${tweetText} ${hashtagString}`;
    }
  }
  
  const encodedText = encodeURIComponent(fullTweetText);
  return `https://twitter.com/intent/tweet?text=${encodedText}`;
}

// Test Groq connection
export async function testGroqConnection(): Promise<{ success: boolean; error?: string }> {
  try {
    const client = initializeGroqClient();
    
    // Simple test query
    const response = await client.chat.completions.create({
      messages: [{ role: 'user', content: 'Say "Groq is working!" in exactly those words.' }],
      model: 'llama-3.3-70b-versatile',
      max_tokens: 10,
    });
    
    const result = response.choices[0]?.message?.content?.trim();
    
    if (result?.includes('Groq is working')) {
      console.log('‚úÖ Groq connection test successful');
      return { success: true };
    } else {
      console.error('‚ùå Groq test failed - unexpected response:', result);
      return { success: false, error: 'Unexpected response from Groq' };
    }
    
  } catch (error) {
    console.error('‚ùå Groq connection test failed:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    };
  }
}
