import Groq from 'groq-sdk';

// Initialize Groq client
function initializeGroqClient() {
  const apiKey = process.env.GROQ_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå GROQ_API_KEY is not set in environment variables');
    throw new Error('GROQ_API_KEY is not set in environment variables');
  }
  
  console.log('‚úÖ Initializing Groq client with API key:', apiKey.substring(0, 10) + '...');
  return new Groq({ apiKey });
}

// Generate tweet using Groq with knowledge base context
export async function generateTweetWithGroq(
  knowledgeBaseText: string,
  campaignGoal: string,
  campaignDetails: string,
  hashtags: string[],
  tone?: string,
  language?: string,
  accountsToMention?: string[],
  existingContent?: string
): Promise<string> {
  try {
    console.log('ü§ñ Generating tweet with Groq...');
    console.log('üìù Campaign goal:', campaignGoal);
    console.log('üìã Knowledge base length:', knowledgeBaseText.length, 'characters');
    console.log('üè∑Ô∏è Hashtags:', hashtags);
    console.log('üåç Language:', language || 'English');
    console.log('üë• Accounts to mention:', accountsToMention || []);
    console.log('‚ú® Has existing content:', !!existingContent);
    
    const client = initializeGroqClient();
    
    // Your perfect prompt adapted for Groq
    const systemPrompt = `You are a creative Web3 social media user. Write a unique tweet about the campaign goal using the knowledge base and campaign details.

Each tweet must be different and should:
Randomly pick a tone (excited, casual, professional, witty, curious, urgent, optimistic, bold, playful, futuristic).
Optionally add (0-3) emojis that match the campaign goal
Begin differently each time (use a question, fact, bold statement, short story, FOMO/urgency or benefit).
Calls-to-action (endings) ‚Üí Rotate between: call-to-action like "Join the waitlist", "Spread the word", "Retweet if you agree", "Don't miss out", "Tag a friend", "Check it out now" or "Be early" based on the campaign goal
Randomly place the link if any needed at the start, middle, or end

Requirements:
Add account mentions as specified in the user prompt
Keep between 230 to 280 characters.
Always include hashtags at the end as specified
Ensure no two tweets are more than 50% similar in wording.
Make it sound human, natural, and engaging, not robotic.`;
    
    let userPrompt = `**Campaign Goal**: ${campaignGoal}

**Campaign Details**: ${campaignDetails}

**Knowledge Base Context**:
${knowledgeBaseText}

**Required Hashtags**: ${hashtags.map(tag => `#${tag}`).join(' ')}

**Accounts to Mention**: ${accountsToMention && accountsToMention.length > 0 ? accountsToMention.map(account => `@${account}`).join(' ') : 'None'}`;

    // Add language requirement if specified
    if (language && language !== 'English') {
      userPrompt += `\n\n**Language**: Please write the tweet in ${language}.`;
    }

    // Add accounts to mention if specified
    if (accountsToMention && accountsToMention.length > 0) {
      userPrompt += `\n\n**Accounts to Mention**: Please mention these accounts in the tweet: ${accountsToMention.map(account => `@${account}`).join(' ')}. Make sure to integrate the mentions naturally into the content.`;
    }

    // Add existing content for beautification if provided
    if (existingContent && existingContent.trim()) {
      userPrompt += `\n\n**Existing Content to Improve**: "${existingContent.trim()}"\n\nPlease improve and beautify this existing content while keeping the core message intact. Make it more engaging, add appropriate emojis, and ensure it follows all the guidelines above.`;
    }

    userPrompt += `\n\n${existingContent && existingContent.trim() ? 'Improve the existing content' : 'Generate a compelling tweet'} that uses the knowledge base context to create authentic, informative content about the campaign goal. Make it human and natural, not robotic.`;

    const response = await client.chat.completions.create({
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      model: 'llama-3.3-70b-versatile',
      temperature: 0.8,
      max_tokens: 300,
    });

    const tweet = response.choices[0]?.message?.content?.trim();
    
    if (!tweet) {
      throw new Error('No tweet generated by Groq');
    }
    
    console.log('‚úÖ Tweet generated successfully:', tweet);
    
    // Ensure hashtags are included if not already present
    let finalTweet = tweet;
    const hashtagString = hashtags.map(tag => `#${tag}`).join(' ');
    if (!finalTweet.includes(hashtagString)) {
      // Add hashtags if they don't fit naturally
      if (finalTweet.length + hashtagString.length + 1 <= 280) {
        finalTweet = `${finalTweet} ${hashtagString}`;
      }
    }
    
    // Ensure tweet is within the 230-280 character range
    if (finalTweet.length < 230) {
      console.log('‚ö†Ô∏è Tweet is too short, adding more content if possible');
    }
    if (finalTweet.length > 280) {
      console.log('‚ö†Ô∏è Tweet exceeds 280 characters, truncating');
      finalTweet = finalTweet.substring(0, 277) + '...';
    }
    
    return finalTweet;
    
  } catch (error) {
    console.error('‚ùå Error generating tweet with Groq:', error);
    
    // Log more detailed error information
    if (error && typeof error === 'object') {
      console.error('Error details:', {
        name: (error as any).name,
        message: (error as any).message,
        status: (error as any).status,
        response: (error as any).response?.data,
      });
    }
    
    throw new Error(`Failed to generate tweet with Groq: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

// Generate multiple tweet variations using Groq
export async function generateMultipleTweetsWithGroq(
  knowledgeBaseText: string,
  campaignGoal: string,
  campaignDetails: string,
  hashtags: string[],
  count: number = 1,
  language?: string,
  accountsToMention?: string[],
  existingContent?: string
): Promise<{ tweet: string; twitterLink: string }[]> {
  // Always generate exactly 1 tweet
  const tweet = await generateTweetWithGroq(
    knowledgeBaseText,
    campaignGoal,
    campaignDetails,
    hashtags,
    undefined, // tone
    language,
    accountsToMention,
    existingContent
  );

  const twitterLink = createTwitterIntentLink(tweet, hashtags);

  return [{ tweet, twitterLink }];
}

// Create Twitter intent link (same as in rivalz-client)
export function createTwitterIntentLink(tweetText: string, hashtags?: string[]): string {
  let fullTweetText = tweetText;
  
  // Add hashtags if they're not already in the tweet
  if (hashtags && hashtags.length > 0) {
    const hashtagString = hashtags.map(tag => `#${tag}`).join(' ');
    if (!tweetText.includes(hashtagString)) {
      fullTweetText = `${tweetText} ${hashtagString}`;
    }
  }
  
  const encodedText = encodeURIComponent(fullTweetText);
  return `https://twitter.com/intent/tweet?text=${encodedText}`;
}

// Test Groq connection
export async function testGroqConnection(): Promise<{ success: boolean; error?: string }> {
  try {
    const client = initializeGroqClient();
    
    // Simple test query
    const response = await client.chat.completions.create({
      messages: [{ role: 'user', content: 'Say "Groq is working!" in exactly those words.' }],
      model: 'llama-3.3-70b-versatile',
      max_tokens: 10,
    });
    
    const result = response.choices[0]?.message?.content?.trim();
    
    if (result?.includes('Groq is working')) {
      console.log('‚úÖ Groq connection test successful');
      return { success: true };
    } else {
      console.error('‚ùå Groq test failed - unexpected response:', result);
      return { success: false, error: 'Unexpected response from Groq' };
    }
    
  } catch (error) {
    console.error('‚ùå Groq connection test failed:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    };
  }
}

// Generate campaign content (title and description) using Groq
export async function generateCampaignContentWithGroq(
  prompt: string,
  category: string,
  tone: string = 'casual',
  language: string = 'English'
): Promise<{ title: string; description: string }> {
  try {
    console.log('ü§ñ Generating campaign content with Groq...');
    console.log('üìù Prompt:', prompt);
    console.log('üè∑Ô∏è Category:', category);
    console.log('üé≠ Tone:', tone);
    console.log('üåç Language:', language);
    
    const client = initializeGroqClient();
    
    const systemPrompt = `You are a creative Web3 marketing expert specializing in creating engaging quest campaigns. Your task is to generate a compelling campaign title and description based on the user's prompt and category.

Guidelines to follow:

üéØ **Campaign Title**:
‚Ä¢ Must be catchy and memorable (max 30 characters)
‚Ä¢ Should clearly communicate the campaign's purpose
‚Ä¢ Use action words and engaging language
‚Ä¢ Avoid generic terms, be specific and unique

üìù **Campaign Description**:
‚Ä¢ Must be compelling and informative (max 300 characters)
‚Ä¢ Explain what participants will do and what they'll gain
‚Ä¢ Include the value proposition clearly
‚Ä¢ Use engaging language that motivates participation
‚Ä¢ Should align with the selected category and tone

üé≠ **Tone Guidelines**:
‚Ä¢ Casual: Friendly, approachable, uses everyday language
‚Ä¢ Professional: Business-like, formal, authoritative
‚Ä¢ Engaging: Exciting, energetic, creates urgency
‚Ä¢ Friendly: Warm, welcoming, community-focused
‚Ä¢ Creative: Innovative, artistic, outside-the-box thinking

üè∑Ô∏è **Category Alignment**:
‚Ä¢ Ensure the content fits the selected category
‚Ä¢ Use relevant terminology and concepts
‚Ä¢ Align with category-specific expectations

‚úÖ **Requirements**:
‚Ä¢ Title: Max 30 characters, engaging and clear
‚Ä¢ Description: Max 300 characters, compelling and informative
‚Ä¢ Must be original and not generic
‚Ä¢ Should inspire action and participation
‚Ä¢ Language should match the specified tone
‚Ä¢ Content should be appropriate for the Web3/blockchain space`;
    
    const userPrompt = `**User Prompt**: ${prompt}

**Category**: ${category}

**Tone**: ${tone}

**Language**: ${language}

Please generate a compelling campaign title and description that:
1. Addresses the user's prompt
2. Fits the selected category
3. Matches the specified tone
4. Is written in the specified language
5. Is engaging and motivates participation

Generate exactly one title and one description that meet all requirements.`;

    const response = await client.chat.completions.create({
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      model: 'llama-3.3-70b-versatile',
      temperature: 0.8,
      max_tokens: 500,
    });

    const content = response.choices[0]?.message?.content?.trim();
    
    if (!content) {
      throw new Error('No campaign content generated by Groq');
    }
    
    console.log('‚úÖ Campaign content generated successfully:', content);
    
    // Parse the response to extract title and description
    // The AI should return them in a structured format, but we'll handle parsing
    const lines = content.split('\n').filter(line => line.trim());
    
    let title = '';
    let description = '';
    
    // Try to extract title and description from the response
    for (const line of lines) {
      if (line.toLowerCase().includes('**campaign title**:') || line.toLowerCase().includes('**campaign title**Ôºö')) {
        title = line.replace(/^\*\*Campaign Title\*\*:\s*/i, '').trim();
      } else if (line.toLowerCase().includes('**campaign description**:') || line.toLowerCase().includes('**campaign description**Ôºö')) {
        description = line.replace(/^\*\*Campaign Description\*\*:\s*/i, '').trim();
      }
    }
    
    // If parsing failed, try to split by line breaks or other indicators
    if (!title || !description) {
      if (lines.length >= 2) {
        title = lines[0].trim();
        description = lines.slice(1).join(' ').trim();
      } else {
        // Fallback: split the content in half
        const midPoint = Math.floor(content.length / 2);
        title = content.substring(0, midPoint).trim();
        description = content.substring(midPoint).trim();
      }
    }
    
    // Clean up the extracted content - remove any remaining markdown formatting
    title = title.replace(/^["']|["']$/g, '').replace(/^\*\*.*?\*\*:\s*/i, '').trim();
    description = description.replace(/^["']|["']$/g, '').replace(/^\*\*.*?\*\*:\s*/i, '').trim();
    
    // Ensure we have valid content
    if (!title || !description) {
      throw new Error('Failed to parse title and description from AI response');
    }
    
    return { title, description };
    
  } catch (error) {
    console.error('‚ùå Error generating campaign content with Groq:', error);
    
    // Log more detailed error information
    if (error && typeof error === 'object') {
      console.error('Error details:', {
        name: (error as any).name,
        message: (error as any).message,
        status: (error as any).status,
        response: (error as any).response?.data,
      });
    }
    
    throw new Error(`Failed to generate campaign content with Groq: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

// Beautify campaign description using Groq
export async function beautifyDescriptionWithGroq(
  description: string
): Promise<string> {
  try {
    console.log('‚ú® Beautifying description with Groq...');
    console.log('üìù Original description:', description);
    
    const client = initializeGroqClient();
    
    const systemPrompt = `You are a creative Web3 marketing expert specializing in writing compelling campaign descriptions. Your task is to beautify and enhance the given campaign description while keeping the core message intact.

Guidelines to follow:

üéØ **Enhancement Goals**:
‚Ä¢ Make the language more engaging and compelling
‚Ä¢ Improve readability and flow
‚Ä¢ Add emotional appeal and excitement
‚Ä¢ Use active voice and action-oriented language
‚Ä¢ Maintain the original meaning and purpose
‚Ä¢ Keep it under 500 characters

‚ú® **Writing Style**:
‚Ä¢ Use vivid, descriptive language
‚Ä¢ Include power words that create urgency
‚Ä¢ Make it sound exciting and valuable
‚Ä¢ Use clear, concise sentences
‚Ä¢ Avoid jargon unless necessary
‚Ä¢ Make it sound human and authentic

üé® **Structure**:
‚Ä¢ Start with a compelling hook
‚Ä¢ Clearly explain the benefits
‚Ä¢ Include a call-to-action if appropriate
‚Ä¢ End with motivation or excitement

‚úÖ **Requirements**:
‚Ä¢ Must be under 500 characters
‚Ä¢ Should be more engaging than the original
‚Ä¢ Must preserve the core message
‚Ä¢ Should sound professional yet exciting
‚Ä¢ Must be appropriate for Web3/blockchain campaigns`;
    
    const userPrompt = `**Original Description**:
"${description}"

Please beautify and enhance this campaign description to make it more engaging, compelling, and exciting while keeping the core message intact. Make it sound more professional and appealing to potential participants.

Return ONLY the beautified description without any prefixes, labels, or formatting.`;
    
    const response = await client.chat.completions.create({
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      model: 'llama-3.3-70b-versatile',
      temperature: 0.7,
      max_tokens: 400,
    });

    const beautifiedDescription = response.choices[0]?.message?.content?.trim();
    
    if (!beautifiedDescription) {
      throw new Error('No beautified description generated by Groq');
    }
    
    console.log('‚úÖ Description beautified successfully:', beautifiedDescription);
    
    // Clean up the response and ensure it's within character limit
    let finalDescription = beautifiedDescription.replace(/^["']|["']$/g, '').trim();
    
    // If it's too long, truncate it
    if (finalDescription.length > 500) {
      finalDescription = finalDescription.substring(0, 497) + '...';
    }
    
    return finalDescription;
    
  } catch (error) {
    console.error('‚ùå Error beautifying description with Groq:', error);
    
    // Log more detailed error information
    if (error && typeof error === 'object') {
      console.error('Error details:', {
        name: (error as any).name,
        message: (error as any).message,
        status: (error as any).status,
        response: (error as any).response?.data,
      });
    }
    
    throw new Error(`Failed to beautify description with Groq: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}
