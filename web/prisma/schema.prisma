// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Campaign {
    id                   String   @id @default(cuid())
    title                String
    description          String
    organizationName     String
    organizationLogo     String?
    questBanner          String?
    startDate            DateTime
    endDate              DateTime
    maxParticipants      Int
    currentParticipants  Int      @default(0)
    rewardAmount         Float
    rewardType           String // 'USDC' or 'SEI'
    distributionMethod   String // 'lucky_draw' or 'equal_distribution'
    numberOfWinners      Int?
    ownerWallet          String // Campaign creator's wallet address
    status               String   @default("draft") // 'draft', 'active', 'ended', 'cancelled'
    funded               Boolean  @default(false) // Whether the campaign has been funded
    blockchainTxHash     String? // Transaction hash when campaign is activated on blockchain
    blockchainCampaignId String? // Campaign ID on blockchain after activation

    // Knowledge Base fields
    knowledgeBaseEnabled      Boolean @default(false)
    knowledgeBasePdfFileName  String?
    knowledgeBasePdfUrl       String?
    knowledgeBaseId           String? // Rivalz knowledge base ID
    knowledgeBaseStatus       String? // 'uploading', 'processing', 'ready', 'error'
    knowledgeBaseErrorMessage String?
    knowledgeBaseManualText   String? // Manual text input for Groq

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    tasks       Task[]
    submissions Submission[]

    @@map("campaigns")
}

model Task {
    id                 String  @id @default(cuid())
    campaignId         String
    type               String // 'x_follow', 'x_post', 'custom'
    title              String?
    instruction        String?
    completionCriteria String?
    enabled            Boolean @default(false)

    // Task-specific fields
    accountToFollow   String? // For X follow tasks
    postLimit         Int? // For X post tasks
    hashtags          String[] // For X post tasks
    accountsToTag     String[] // For X post tasks
    customTitle       String? // For custom tasks
    customDescription String? // For custom tasks
    qpReward          Int      @default(10)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    campaign    Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    submissions Submission[]

    @@map("tasks")
}

model Submission {
    id             String  @id @default(cuid())
    campaignId     String
    taskId         String?
    userWallet     String // Participant's wallet address
    submissionType String // 'task_completion', 'full_quest'
    status         String  @default("pending") // 'pending', 'approved', 'rejected', 'verified'

    // Task completion data
    taskData        Json? // Store task-specific completion data
    twitterUsername String? // Twitter username for verification
    twitterPostUrl  String? // URL of the Twitter post
    proofImage      String? // URL to proof image if uploaded

    // Verification data
    verifiedAt    DateTime?
    verifierNotes String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    task     Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

    // Indexes for performance
    @@unique([userWallet, campaignId, taskId])
    @@map("submissions")
}

model UserProfile {
    id            String  @id @default(cuid())
    walletAddress String  @unique
    email         String? @unique
    displayName   String?
    avatarUrl     String?
    bio           String?
    totalXP       Int     @default(0)

    // Twitter account fields (manual linking)
    twitterId           String? @unique
    twitterUsername     String?
    twitterName         String?
    twitterProfileImage String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("user_profiles")
}

model NewsletterSubscription {
    id        String   @id @default(cuid())
    email     String   @unique
    subscribed Boolean @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("newsletter_subscriptions")
}
